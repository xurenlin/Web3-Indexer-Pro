1. 详细设计（模块职责、交互与技术选型）

1.1 各微服务职责（简要）

1. api-gateway
- 路由转发
- 认证鉴权（JWT校验）
- 限流（Sentinel）
- 统一接入日志
技术栈：Spring Cloud Gateway + Sentinel + Nacos

2. auth-service
- 用户/开发者管理
- API Key管理
- OAuth2 token发放
- 权限控制
技术栈：Spring Cloud Alibaba + Spring Security OAuth2

3. chain-indexer
- 从RPC节点订阅新区块
- 轮询历史区块
- 写入Kafka topics（blocks, txs, logs）
- 支持多链（配置化：chainId、RPC endpoints）
技术栈：Spring Boot（Spring Cloud）+ Web3j（初期）+ Kafka Producer
后期优化：通过JNI调用Rust RPC客户端替换高吞吐路径

4. tx-processor
- Kafka Consumer（logs/txs）
- 决定是否需要ABI解码
- 通过Feign调用metadata-service获取ABI
- 通过JNI调用Rust解码库或HTTP调用Rust解码服务
- 写入PostgreSQL / MongoDB / ES
- 更新Redis缓存
- 触发realtime-service推送
技术栈：Spring Cloud Alibaba + Kafka Consumer + Feign + ElasticSearch客户端 + JNI

5. metadata-service
- contract ABI管理（上传、版本）
- 从IPFS/GitHub拉取ABI
- NFT元数据抓取与缓存（MongoDB）
- 提供ABI查询API（供tx-processor使用）
技术栈：Spring Cloud Alibaba + MongoDB

6. analytics-service
- 定时/按需聚合：token转账统计、地址排行、NFT稀有度评估、趋势分析
- 主要读ES + Postgres
- 输出聚合结果写入ES或Redis缓存
技术栈：Spring Cloud Alibaba + ElasticSearch + Redis
可选：Seata（在需要分布式事务时使用）

7. realtime-service (Rust)
- 高并发WebSocket / GraphQL订阅推送
- tx-processor向该服务推送事件（HTTP/gRPC）
- 负责分发到订阅客户端（高吞吐低延迟）
技术栈：Rust (axum / tokio / tungstenite)

1.2 服务间通信

服务发现与配置：
- Nacos（所有Java服务注册）

内部调用：
- Java ↔ Java：使用Feign + Nacos Discovery（带熔断策略）

消息队列：
- Kafka（indexer -> tx-processor）

跨语言通信：
- Java ↔ Rust（本机）：JNI（高频、CPU密集解码）
- Java ↔ Rust（独立服务）：HTTP/gRPC（realtime-service）

数据存储：
- tx-processor写PostgreSQL / MongoDB / ElasticSearch
- analytics-service读ES / Redis

1.3 运维与监控

监控体系：
- Prometheus + Grafana（指标监控）
- Zipkin / Sleuth（链路追踪）
- Kibana（ElasticSearch可视化）
- Sentinel Dashboard（限流/降级监控）

日志管理：
- ELK或Loki（结构化日志）
