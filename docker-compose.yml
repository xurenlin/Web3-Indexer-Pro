version: '3.8'

services:
  # ========================
  # 基础设施服务
  # ========================

  # 服务注册与配置中心
  nacos:
    image: nacos/nacos-server:2.3.2
    container_name: nacos-server
    environment:
      - MODE=standalone
      - SPRING_DATASOURCE_PLATFORM=postgresql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=nacos
      - DB_USER=nacos
      - DB_PASSWORD=nacos123
    ports:
      - "8848:8848"
    depends_on:
      - postgres
    volumes:
      - nacos_data:/home/nacos/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8848/nacos/" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:3.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 12
      KAFKA_LOG_RETENTION_HOURS: 168
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库
  postgres:
    image: postgres:15.6
    container_name: postgres-dev
    environment:
      POSTGRES_DB: web3_indexer
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: web3_indexer,nacos
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
      - ./scripts/sql/schema/:/docker-entrypoint-initdb.d/schema/
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d web3_indexer" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 缓存
  redis:
    image: redis:7.2.4-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    environment:
      - REDIS_PASSWORD=redis123
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "redis123", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 搜索与分析
  elasticsearch:
    image: elasticsearch:8.13.0
    container_name: elasticsearch-dev
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: kibana:8.13.0
    container_name: kibana-dev
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # 监控系统
  prometheus:
    image: prom/prometheus:2.51.0
    container_name: prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.3.3
    container_name: grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

  # 链路追踪
  zipkin:
    image: openzipkin/zipkin:2.24.3
    container_name: zipkin-dev
    ports:
      - "9411:9411"
    environment:
      - STORAGE_TYPE=mem
    restart: unless-stopped

  # ========================
  # 业务服务
  # ========================

  # API网关
  api-gateway:
    build:
      context: ./java
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_NACOS_SERVER_ADDR=nacos:8848
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PASSWORD=redis123
    depends_on:
      nacos:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 认证服务
  auth-service:
    build:
      context: ./java
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_NACOS_SERVER_ADDR=nacos:8848
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/web3_indexer
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PASSWORD=redis123
    depends_on:
      nacos:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Rust实时服务
  realtime-service:
    build:
      context: ./rust
      dockerfile: realtime-service/Dockerfile
    container_name: realtime-service
    ports:
      - "8081:8080"
      - "8082:8082" # WebSocket端口
    environment:
      - RUST_LOG=info
      - DATABASE_URL=postgresql://admin:password@postgres:5432/web3_indexer
      - REDIS_URL=redis://:redis123@redis:6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # Kafka UI (管理界面)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8083:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    restart: unless-stopped

networks:
  default:
    name: web3-indexer-network

volumes:
  nacos_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
